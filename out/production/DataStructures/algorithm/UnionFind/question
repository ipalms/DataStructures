/**
 * 并查集的一些内容：
 * 并查集（Union-find Data Structure）是一种树型的数据结构。
 * 它的特点是由子结点找到父亲结点，用于处理一些不交集（Disjoint Sets）的合并及查询问题。
 * 即合并不相交的集合、并查询合并后集合内容
 *
 * 初始化（Initialize）：把每个点所在集合初始化为其自身。
 * 通常来说，这个步骤在每次使用该数据结构时只需要执行一次，无论何种实现方式，时间复杂度均为O(N)。
 * 查找（Find）：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。
 * 合并（Union）：将两个子集合并成同一个集合在将两个子集合并之前应该尝试使用Find方法判断两个元素是否属于同一集合。
 *
 * 两个优化并查集的手段：
 * 1.路径压缩：为了加快查找速度，查找时将x到根节点路径上的所有点的parent设为根节点该优化方法称为压缩路径。
 * 由于路径压缩只在查询时进行，也只压缩一条路径，所以并查集最终的结构仍然可能是比较复杂的
 * 例如对于【2,5,6,7,8,9】数组，较大值为父节点情况下，在第一遍遍历时是无法做到路径压缩的
 * 2.按秩合并：两个集合合并，应该优先于向树高较高的一方进行合并，这样合并后的树高高度不变
 *
 * 使用这两种优化后，单次并查集操作【一次find()、或者一次union()】的平均复杂度可视为其是一个常数（比O（logN）还快）。
 */