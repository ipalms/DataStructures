package algorithm.DynamicProgramming;

/**
 * 123. 买卖股票的最佳时机 III
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
 * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * 示例 1:
 *
 * 输入：prices = [3,3,5,0,0,3,1,4]
 * 输出：6
 * 解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
 *      随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
 * 示例 2：
 *
 * 输入：prices = [1,2,3,4,5]
 * 输出：4
 * 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
 *      注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
 *      因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 * 示例 3：
 *
 * 输入：prices = [7,6,4,3,1]
 * 输出：0
 * 解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
 * 示例 4：
 *
 * 输入：prices = [1]
 * 输出：0
 *
 * 提示：
 * 1 <= prices.length <= 105
 * 0 <= prices[i] <= 105
 */
public class MaxProfitIII123 {

    /**
     * 买卖股票的最佳时机系列题--此题特点是可以买卖两次
     * 1.动态规划---此题不可以贪心
     */


    /**
     * 此题的状态设定和前两题不同，因为题目规定了最多交易两次，所以相当于增加了状态的可能性
     * dp含义：
     * 一天一共就有五个状态
     * 0. 没有操作--未进行过任何操作
     * 1. 第一次买入--只进行过一次买操作
     * 2. 第一次卖出--进行了一次买操作和一次卖操作，即完成了一笔交易
     * 3. 第二次买入--在完成了一笔交易的前提下，进行了第二次买操作
     * 4. 第二次卖出--完成了全部两笔交易
     * 相比前两题的状态设定是：1.手上持有股票（对应了买入股票的状态）    2.手上没有持有股票(没有操作，或者已经卖出的状态)
     * dp[i][j]中 i表示第i天，j为 [0 - 4] 五个状态，dp[i][j]表示第i天状态j所剩最大现金。
     *
     * 状态转移方程推导：
     * 需要注意：dp[i][1]，表示的是第i天，买入股票的状态，并不是说一定要第i天买入股票
     * 达到dp[i][1]状态，有两个具体操作：
     *      操作一：第i天买入股票了，那么dp[i][1] = dp[i-1][0] - prices[i]
     *      操作二：第i天没有操作，而是沿用前一天买入的状态，即：dp[i][1] = dp[i - 1][1]
     * 所以 dp[i][1] = max(dp[i-1][0] - prices[i], dp[i - 1][1]);
     * 同理dp[i][2]也有两个操作：
     *      操作一：第i天卖出股票了，那么dp[i][2] = dp[i - 1][1] + prices[i]
     *      操作二：第i天没有操作，沿用前一天卖出股票的状态，即：dp[i][2] = dp[i - 1][2]
     * 所以dp[i][2] = max(dp[i - 1][1] + prices[i], dp[i - 1][2])
     * 同理可推出剩下状态部分
     *
     * 初始化：
     * 第0天没有操作，这个最容易想到，就是0。即：dp[0][0] = 0;
     * 第0天做第一次买入的操作，dp[0][1] = -prices[0];
     * 第0天做第一次卖出的操作，dp[0][1] = 0;
     * 第二次买入依赖于第一次卖出的状态，其实相当于第0天第一次买入了，第一次卖出了
     * 然后在买入一次（第二次买入），那么现在手头上没有现金，只要买入，现金就做相应的减少。
     * 所以第二次买入操作，初始化为：dp[0][3] = -prices[0];
     * 同理第二次卖出初始化dp[0][4] = 0;
     */
    public int maxProfit(int[] prices) {
        int n=prices.length;
        /*
         * 定义 5 种状态:
         * 0: 没有操作, 1: 第一次买入, 2: 第一次卖出, 3: 第二次买入, 4: 第二次卖出
         * 所以dp[i][0]=0一直成立
         */
        int [][]dp=new int[n][5];
        //显式初始化，了解第一天状态的初始化
        dp[0][0]=0;
        dp[0][1]=-prices[0];
        dp[0][2]=0;
        dp[0][3]=-prices[0];
        dp[0][4]=0;
        for(int i=1;i<n;++i){
            //dp[i][0]=dp[i-1][0];
            dp[i][1]=Math.max(dp[i-1][1],-prices[i]);
            dp[i][2]=Math.max(dp[i-1][2],dp[i-1][1]+prices[i]);
            dp[i][3]=Math.max(dp[i-1][3],dp[i-1][2]-prices[i]);
            dp[i][4]=Math.max(dp[i-1][4],dp[i-1][3]+prices[i]);
        }
        return dp[n-1][4];
    }

    /**
     * 状态压缩
     */
    public int maxProfit1(int[] prices) {
        /*
         * 定义 5 种状态:
         * 0: 没有操作, 1: 第一次买入, 2: 第一次卖出, 3: 第二次买入, 4: 第二次卖出
         * 所以dp[i][0]=0一直成立
         */
        int []dp=new int[5];
        dp[1]=-prices[0];
        dp[3]=-prices[0];
        for(int i=1;i<prices.length;++i){
            dp[1]=Math.max(dp[1],-prices[i]);
            dp[2]=Math.max(dp[2],dp[1]+prices[i]);
            dp[3]=Math.max(dp[3],dp[2]-prices[i]);
            dp[4]=Math.max(dp[4],dp[3]+prices[i]);
        }
        return dp[4];
    }

}
