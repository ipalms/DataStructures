package algorithm.DynamicProgramming;

/**
 * 121. 买卖股票的最佳时机
 * 给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。
 * 你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。
 * 设计一个算法来计算你所能获取的最大利润。
 * 返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。
 * 示例 1：
 * 输入：[7,1,5,3,6,4]
 * 输出：5
 * 解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
 *      注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
 * 示例 2：
 * 输入：prices = [7,6,4,3,1]
 * 输出：0
 * 解释：在这种情况下, 没有交易完成, 所以最大利润为 0。
 * 提示：
 * 1 <= prices.length <= 105
 * 0 <= prices[i] <= 104
 */
public class MaxProfit121 {

    /**
     * 买卖股票的最佳时机系列题--此题特点是只能买卖各一次
     * 这道题可以由很多思路解出
     * 1.暴力遍历数组中任意两点距离求最大差值（后-前）
     * 2.贪心算法，维护min(最小股值)、res（最大差值两个变量）--这个是此题最优解法
     * 3.动态规划
     */

    /**
     * 贪心
     */
    public int maxProfit(int[] prices) {
        int res=0,min=prices[0];
        for(int i=0;i<prices.length;++i){
            if(prices[i]>min){
                res=Math.max(res,prices[i]-min);
            }else{
                min=prices[i];
            }
        }
        return res;
    }

    /**
     * 动态规划1
     * 当天是否持股 是一个很重要的因素，而当前是否持股和昨天是否持股有关系
     * 为此我们需要把是否持股设计到状态数组中
     * 状态定义:
     * dp[i][j]:下标为i这一天结束的时候，手上持股状态为j时，我们持有的现金数。
     *      j = 0,表示当前不持股;
     *      j = 1，表示当前持股。
     * 最终输出：dp[len-1][0]
     *     （为什么不是dp[len-1][1]，因为后者代表最后一天还持有股份，而持有股份时所得金钱一定是少于抛售后的）
     *      即本题中不持有股票状态所得金钱一定比持有股票状态得到的多
     * 初始化：不持股显然为 0，持股就需要减去第 1 天（下标为 0）的股价
     *        初始不持股为0是为了得出买入抛出一次后的所赚金额
     * 状态转移方程:
     * dp[i][0]:规定了今天不持股,有以下两种情况:
     *       昨天不持股，今天什么都不做
     *       昨天持股，今天卖出股票(现金数增加)
     * dp[i][1]:规定了今天持股，有以下两种情况:
     *      昨天持股,今天什么都不做(现金数与昨天-样)
     *      昨天不持股，今天买入股票(注意:只允许交易一次,因此手上的现金数就是当天的股价的相反数)。
     */
    public int maxProfit2(int[] prices) {
        int len = prices.length;
        // dp[i][0] 下标为 i 这天结束的时候，不持股，手上拥有的现金数
        // dp[i][1] 下标为 i 这天结束的时候，持股，手上拥有的现金数
        int[][] dp = new int[len][2];
        // 初始化：不持股显然为 0，持股就需要减去第 1 天（下标为 0）的股价
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        // 从第 2 天开始遍历
        for (int i = 1; i < len; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
            //只允许交易一次,因此手上的现金数就是当天的股价的相反数
            //这里是唯一和122题买卖多次的区别，因为只能交易一次，所以这之前如果处于没买股票情况则买入的后现金应为当天的股价的相反数
            //交易多次的话要考虑到前面多次交易的赚取的金额-->dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0]-prices[i]);
            dp[i][1] = Math.max(dp[i - 1][1], -prices[i]);
        }
        return dp[len - 1][0];
    }

    /**
     * 空间优化版本一般都要在写出空间没有优化版本后进行改进
     * 动态规划2--空间优化（滚动数组）
     */
    public int maxProfit3(int[] prices) {
        int len = prices.length;
        // dp[i][0] 下标为 i 这天结束的时候，不持股，手上拥有的现金数
        // dp[i][1] 下标为 i 这天结束的时候，持股，手上拥有的现金数
        int[][] dp = new int[2][2];
        // 初始化：不持股显然为 0，持股就需要减去第 1 天（下标为 0）的股价
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        // 从第 2 天开始遍历
        for (int i = 1; i < len; i++) {
            dp[i%2][0] = Math.max(dp[(i - 1)%2][0], dp[(i - 1)%2][1] + prices[i]);
            dp[i%2][1] = Math.max(dp[(i - 1)%2][1], -prices[i]);
        }
        return dp[(len - 1)&1][0];
    }

    /**
     * 动态规划3：---空间优化进一步
     * 说明:空间优化只看状态转移方程。
     * 状态转移方程里下标为i的行只参考下标为i一1的行(即只参考上一行)，并且:
     *    下标为i的行并且状态为0的行参考了上一行状态为0和1的行;
     *    下标为i的行并且状态为1的行只参考了上-行状态为1的行。
     */
    public int maxProfit4(int[] prices) {
        int len = prices.length;
        int[] dp = new int[2];
        dp[0] = 0;
        dp[1] = -prices[0];
        for (int i = 1; i < len; i++) {
            dp[0] = Math.max(dp[0], dp[1] + prices[i]);
            dp[1] = Math.max(dp[1], -prices[i]);
        }
        return dp[0];
    }

    /**
     * 暴力
     */
    public int maxProfit1(int[] prices) {
        int len = prices.length;
        // 可能不发生交易，因此结果集的初始值设置为 0
        int res = 0;
        // 枚举所有发生一次交易的股价差
        for (int i = 0; i < len - 1; i++) {
            for (int j = i + 1; j < len; j++) {
                res = Math.max(res, prices[j] - prices[i]);
            }
        }
        return res;
    }

}
