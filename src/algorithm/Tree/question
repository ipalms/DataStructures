做二叉树相关问题几乎就两个思路：深度优先遍历和广度优先遍历（借助queue队列）
对于深度优先遍历的解法，就通常按照递归的三部曲进行就可以(思考临界输出情况、每一步要做的事、返回值)
值得一提的是很多深度遍历的解题又是与树的前序、中序、后续遍历顺序有关.即每一步非递归部分可能出现在递归两子树之前、中间、后面。
递归方法的入参可能为两颗树root节点，可能有嵌套递归，或者返回值不需要其他调用方法接收（只用于递归方法自身使用），总之递归方法的设计要结合具体题意予以实现
还有借助系统栈的深度优先遍历也可以改成自己编写栈存储节点的形式
广度优先就可以看作层序遍历的具体实现，在不同bfs解法中有时会注重二叉树层与层之间的关系，有时不需可以按照层层关系逐层遍历（队列也不一定总是不加入null节点【有些题目null节点对结果有影响】）
特别的如果题目要求使用O(1)的空间使用且与遍历有关时通常可以考虑Mirrors遍历方式（把树拉伸为一条直链）
遍历有关的在：TreeTraversal类
广度优先在：98验证二叉搜索树
路径有关问题：112路径总和
树高有关问题：MaxOrMinDepth类
完全二叉树问题：222 完全二叉树的节点个数、958 二叉树的完全性检验、662 二叉树最大宽度
