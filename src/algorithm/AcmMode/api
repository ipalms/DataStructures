Scanner:
构造方法：Scanner scanner = new Scanner(System.in);
Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要使用hasNext与hasNextLine判断是否还有输入的数据
next() 与 nextLine() 区别
next():
    1、一定要读取到有效字符后才可以结束输入。
    2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。
    3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。
    4、由上面可知next() 不能得到带有空格的字符串。
nextLine()：
    1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。
    2、可以获得空白。
scanner同样可以直接获得int或者float等类型的数据，当然也有提前校验是否含还有该类型数据的api
如：hasNextInt()提前校验是否含还有int类型数据，nextInt()获得下一个int类型的值

数组--或者多行输入读取值时通常套路是(while循环不断判断输入):
while(sc.hasNextInt()){
    int v1=sc.nextInt();
    ....
}

注意字符串和数字的相互转换(nextLine()的返回值是一个字符串，split拆分后任然是字符串)：
Integer.parseInt("1230")
String.valueOf(1230)

注意因为要写main方法所以与之有关的应该是需要定义内部类应该定义为静态类
main()直接调用的应该为静态方法，main类使用的外部属性应该是static修饰的
定义在Main类外的类可以不用static关键词修饰，用到的所有类（除了java.lang以外）都需要导包后使用

String:
熟练使用 "word i kill".split(" ")  split按照字符拆分string返回string[]
String.join(list," ") 将指定的拆分字符插入list字符数组或者集合中

多行输入时使用Buffer(缓冲类)更快（但是使用这个类的方法要在main方法中抛出异常 throw IOException）：
BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
//读取一行
reader.readLine();